// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  userName      String    @unique @map("username")
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  email         String    @unique
  password      String    
  role          Role      @default(value: USER)
  recoveryToken String?   @map("recovery_token")
  verifyToken   String?    @map("verify_token")
  isVerified    Boolean   @default(false)
  isPublicName  Boolean   @map("is_public_name") @default(false)
  isPublicEmail Boolean   @map("is_public_email") @default(false)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  ///relations
  commentLikes  UsersLikeComments[]
  postLikes     UsersLikePosts[]
  posts         Post[]
  comments      Comment[]
  reports       Report[]

  @@map("user")
}


model Comment {
  id            Int       @id @default(autoincrement())
  body          String
  isDraft       Boolean   @default(false) @map("is_draft")
  amountLike    Int?      @default(0) @map("amount_like")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  ///relations
  author        User      @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  authorId      Int
  post          Post      @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  postId        Int
  userLike      UsersLikeComments[]
  reports   Report[]

  @@map("comment")
}

model UsersLikeComments {
  id        Int           @id @default(autoincrement())
  type      TypeReaction
  user      User?         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId    Int?
  comment   Comment?      @relation(fields: [commentId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  commentId Int?
  createdAt DateTime      @default(now()) @map("created_at")

  @@map("users_like_comments")

} 

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  isDraft   Boolean   @default(false) @map("is_draft")
  amountLike    Int?      @default(0) @map("amount_like")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  ///relations
  author    User     @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  authorId  Int
  comments  Comment[]
  userLikes UsersLikePosts[]  
  reports   Report[]

  @@map("post")
}

model UsersLikePosts {
  id        Int           @id @default(autoincrement())
  type      TypeReaction
  user      User?         @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId    Int?
  post      Post?         @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  postId    Int?
  createdAt DateTime      @default(now()) @map("created_at")

  @@map("users_like_posts")
}

model Report {
  id        Int       @id @default(autoincrement())
  reason    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  ///relations
  author    User      @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  authorId  Int
  post      Post?     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  postId    Int?
  comment   Comment?  @relation(fields: [commentId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  commentId Int?

  @@map("report")
}

enum Role {
  USER 
  MODERATOR
  @@map("role")
}

enum TypeReaction {
  LIKE
  DISLIKE
  @@map("type_reaction")
}